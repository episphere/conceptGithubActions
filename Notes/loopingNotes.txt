CSVToArray Function --> returns an array of the current line being read and removes duplicate ""

Example 

[
  '6646',
  '6646',
  '129084651',
  'Survey',
  '206639461',
  'All',
  '',
  '',
  '',
  '677381583',
  '""Completed Standalone Surveys - Biospecimen, Menstrual Cycle, DHQ, etc.""',
  'Completed Standalone Surveys',
  'SrvAll_StndAlSrvCompl_v1r0',
  '',
  'Num',
  '3',
  '',
  'N/A',
  'Yes',
  'No',
  'Used to populate PWA participant banner with the number of completed standalone surveys. Derived on the back end.',
  '',
  'Master Data Dictionary',
  'No',
  'No',
  '8/10/22',
  '',
  '',
  '',
  '',
  '',
  ''
]


// varToConcept.json key check

Cluster line 2
[
    "2",
    "2",
    "192505768",
    "Recruitment",
    "883203566",
    "Sign in",
    "",
    "",
    "",
    "512820379",
    "Autogenerated flag - Recruitment type",
    "Recruitment type",
    "RcrtSI_RecruitType_v1r0",
    "",
    "Num",
    "1",
    "180583933",
    "0 = Not active",
    "Yes",
    "No",
    "All Study IDs for which the sites have indicated they are actively recruiting will be flagged as 1.  This should be triggered by a combination of sending the Study IDs to the \"\"Get Participant Token\"\" API and then sending the deidentified demographic information to the \"\"Submit participant data\"\" API. Study IDs assigned a token/PIN, but who are not being actively recruited are flagged as zero (default) when the study ID is submitted. All individuals who sign-in without a valid token or pin are flagged as 2.",
    "",
    "Recruitment Data Dictionary",
    "No",
    "Yes",
    "",
    "",
    ""
]

Loop 1

Populate conceptIdIndices variable (array) with concept Id index numbers 

Ex. conceptIdIndices --> [2, 4, 6, 9, 16]

Add to conceptIdReverseLookup variable (object) with header name and concept Id location
	
// Ex. {'Primary Source': 2, 'Secondary Source': 4, 'Source Question': 6, 'Question Text': 9, 'Format/Value': 16}


Loop 2 

Loop through current  cluster (done if current cluster has more than 1 line associated)
Loops through all lines without questionText associated with line with Qtext
Loops inside all text of proceeding lines w/o Qtext associated with first line qText
PUSHES to nonEmpty array
	1. Current item in list is NOT empty in the current line array (no Qtext) 
	2. Given the current iteration index number is NOT in the conceptIdIndices array (see loop 1)
	3. current concept Id index number NOT found in nonEmpty array

Numbers 0,1,17 are pushed since the index value was NOT empty and conceptIdIndices NOT Includes in --> [2, 4, 6, 9, 16]

// Ex. conceptIdIndices --> [2, 4, 6, 9, 16]

PURPOSE add to --> nonEmpty array 


// Ex. nonEmpty -> [ 0, 1, 17 ]


A cluster can be a single row array or multiple row arrays

Note: 

*Skipped if cluster is single row*

Q: How is a cluster defined? 

Answer: 
A row has a question text and the proceeding row after has a question text. (cluster with one row)
A row has a question text and the proceeding row has no question text. Example format/ value responses.  (cluster with multiple rows)

nonEmpty indices are the items with values AND where the current item index is not found in the cocneptIdIndices

Loop 3

Loop over first cluster row (cluster[0]) items (firstRow variable)

Add to firstRowJSON object given all the following conditions:

	1. Current item is not empty 
	2. Current iteration loop number is NOT found in nonEmpty array (see loop 2)
	// Ex. nonEmpty -> [ 0, 1, 17 ]
	3. Current iteration loop number is NOT found in the conceptIdIndices (see loop 1)
	// Ex. conceptIdIndices --> [2, 4, 6, 9, 16]

	
	OR
	
	1. Current iteration loop number EXISTS in conceptIdIndices 
	// Ex. conceptIdIndices --> [2, 4, 6, 9, 16]
	2. Current iteration loop number used as bracket notation on conceptIdObject key to determine if the value has "Question Text" string

PURPOSE add to --> firstRowJSON the header key asscoiated with the first cluster line's assoicated value 

Header Key: value of first row of cluster (passed conditions)


Example of Cluster of line 2

3, 5,  10, 11, ,12, 14, 15, 18, 19, 20, 22, 23, 24

// {"Primary Source": 3, "Secondary Source": 5, "Question Text": 10, "Variable Label": 11, "Variable Name": 12, "Variable Type": 14, "Variable Length": 15, "Required": 18, "PII": 19, "Notes": 20, "Dictionary": 22, "State Attribute": 23, "Default Variable": 24}


Ex. { 2: 'Primary Source', 4: 'Secondary Source', 6: 'Source Question', 9: 'Question Text', 16: 'Format/Value'}
//  conceptIdObject[9] == "Question Text"
// conceptId key gets added from header[9] = conceptId

// Note: This is why we see added, the OR condition --> conceptId:'471593703' 
// Other keys are from the first condition passing

PURPOSE --> add header keys and values of firstCluster  to firstRowJSON

Note: Cluster (more than 1 line without question text index value), firstRowJSON will have nonEmpty and skip headers from nonEmpty list

IF BLOCK BETWEEN LOOP 3 & 4

Outer main if Block 
	--> If conceptId key NOT FOUND OR conceptId key does not exist
Inner If Block
	--> Check nameToConcept(same as varToConcept) for existing questionText, if found continue below
	--> Add "conceptId" key and questionText string value
	--> if conditional,  check if conceptId is NOT found in conceptIdList (conceptIds.txt)
		--> NOT found push concept Id to conceptIds.txt
Inner else Block 
	--> question text NOT found in  nameToConcept
		--> reassign empty conceptId value w/ random 9 digit number
		--> push new concept Id generated to ceonceptIdList
		--> add questionText key to new concept Id# 
		
Purpose --> to check varToConcept library for references to insert concept Id match or generate a new concept Id

Note: Skipped if firstRowJSON has no concept Id key or concept id value

firstRow[conceptIdReverseLookup['Question Text']] = firstRowJSON['conceptId'] // reassgin concept Id of question text with generated number


Loop 4


Loop over conceptColNames 

Searches and uses varToConcept.json library
// firstRow (cluster[0]) --> 

conceptColNames --> ['Primary Source','Secondary Source','Source Question','Question Text','Format/Value']

conceptIdReverseLookup --> {'Primary Source': 2, 'Secondary Source': 4, 'Source Question': 6, 'Question Text': 9, 'Format/Value': 16}


conceptIdReverseLookup[conceptColNames[i]] + 1

firstRow[conceptIdReverseLookup[conceptColNames[0]] + 1] --> 3 --> index 3 of firstRow

Outer main if Block 
	--> Check and s find current item in conceptColNames  for the word 'Source'
	--> current item of firstRow has a value
		// conceptIdReverseLookup[conceptColNames[i]] + 1]


Nested For Loop inside If Block 
	--> Loop over cluster items
	If Block 
		--> Check and run block if current cluster 's 'Primary Source', 'Secondary Source', 'Source Question' index have values
			--> Values found, assign currId conceptId if present OR empty
			--> Values found, assign currVarName with text value
			
			Check if currId is empty AND nameToConcept(varToConcept.json library) has key value from currValueName
				--> FOUND - assign conceptId found in varToConcept.json 
			
			Assign found variable -1 
			
TODO: Review why Source Question not being iterated
ANSWER: Examples used DO NOT HAVE Source Question


Adds to temporary nameToConcept (varToConcept.json) variable --> used in Loop 5

Loop 5

Loop over nonEmpty array
// Ex. nonEmpty -> [ 0, 1, 17 ]
This loop runs when cluster has more than one line
